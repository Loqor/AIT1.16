package com.mdt.ait.tardis;

import com.mdt.ait.AIT;
import com.mdt.ait.common.tileentities.TardisTileEntity;
import com.mdt.ait.common.worldsaveddata.TardisWorldSavedData;
import com.mdt.ait.core.init.enums.EnumDoorState;
import com.mdt.ait.tardis.special.DematTransit;
import net.minecraft.nbt.CompoundNBT;
import net.minecraft.nbt.ListNBT;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.Direction;
import net.minecraft.util.RegistryKey;
import net.minecraft.util.Tuple;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.server.ServerWorld;
import net.minecraftforge.common.util.Constants;
import net.minecraftforge.common.world.ForgeChunkManager;

import java.util.HashMap;
import java.util.UUID;


public class TardisManager {

    public static HashMap<TardisId, Tardis> tardisList = new HashMap<>();

    public static HashMap<Integer, TardisId> integerMapToUUID = new HashMap<>();
    public static int latestTardisNumber = 0;

    private final MinecraftServer server = AIT.server;

    public static TardisWorldSavedData tardisWorldSavedData;
    public boolean rematerialize = false;
    public boolean canFall = false;

    public TardisManager() {
        tardisWorldSavedData = new TardisWorldSavedData(this);
    }

    public Tardis createNewTardis(UUID owner, BlockPos exteriorPosition, RegistryKey<World> exteriorDimension) {
        TardisId tardisId = new TardisId(UUID.randomUUID());
        TardisManager.tardisWorldSavedData.setDirty(true);
        TardisManager.latestTardisNumber += 1;

        Tardis tardis = new Tardis(owner, exteriorPosition, exteriorDimension, tardisId, new Tuple<>(latestTardisNumber, latestTardisNumber), false, TardisInteriors.getInteriorFromName("Dev Interior"));
        tardisList.put(tardisId, tardis);
        integerMapToUUID.put(latestTardisNumber, tardis.tardisId);
        return tardis;
    }

    public Tardis getTardis(TardisId tardisId) {
        return tardisList.get(tardisId);
    }

    public Tardis getTardisFromPosition(BlockPos pos) {
        return getTardis(getTardisIDFromPosition(pos));
    }

    public TardisId getTardisIDFromPosition(BlockPos pos) {
        int x = pos.getX();
        int x_r = TardisConfig.tardis_dimension_start_x - x;
        double x_g = ((double) x_r) / ((double) TardisConfig.tardis_area_x);
        int x_gr = ((int) Math.ceil(x_g));

        return integerMapToUUID.get(x_gr);
    }

    public void setTargetDimensionForTardis(TardisId tardisId, RegistryKey<World> newTargetDimension) {
        this.getTardis(tardisId).targetDimension = newTargetDimension;
    }

    public void setTardisTargetBlockPos(TardisId tardisId, BlockPos targetPosition) {
        if(this.getTardis(tardisId).targetPosition != targetPosition) {
            this.getTardis(tardisId).targetPosition = targetPosition;
        }
    }

    public void setTardisExteriorFacing(TardisId tardisId, Direction targetDirection) {
        this.getTardis(tardisId).targetFacingDirection = targetDirection;
    }

    public DematTransit moveTardisToTargetLocation(TardisId tardisId) {
        Tardis tardis = this.getTardis(tardisId);
        tardis.previousExteriorPos = tardis.exteriorPosition;
        tardis.previousDirection = tardis.exteriorFacing;
        tardis.previous_dimension = tardis.exterior_dimension;
        tardis.setInteriorDoorState(EnumDoorState.CLOSED);
        tardis.setExteriorDoorState(EnumDoorState.CLOSED);
        ServerWorld oldDimension = server.getLevel(tardis.exterior_dimension);
        assert oldDimension != null;
        ForgeChunkManager.forceChunk(oldDimension, AIT.MOD_ID, tardis.exteriorPosition, 0, 0, true, true);
        TardisTileEntity oldTardisTileEntity = (TardisTileEntity) oldDimension.getBlockEntity(tardis.exteriorPosition);
        assert oldTardisTileEntity != null;
        DematTransit dematTransit = new DematTransit(tardisId);
        oldTardisTileEntity.dematTardis(dematTransit);
        return dematTransit;
    }

    public boolean doesTardisHaveATargetLocation(TardisId tardisId) {
        Tardis tardis = getTardis(tardisId);
        return tardis.targetPosition != null && tardis.targetDimension != null && tardis.targetFacingDirection != null;
    }

    public void load(CompoundNBT tag) {
        System.out.println("Tardis Manager: Loading!");
        ListNBT tardis_nbt_list = tag.getList("tardis_list", Constants.NBT.TAG_COMPOUND); // Always add Constants.NBT.TAG_COMPOUND idk why you need it but you do
        ListNBT int_to_tardis_id_list = tag.getList("integer_tardis_list_to_get_UUID", Constants.NBT.TAG_COMPOUND);
        tardis_nbt_list.forEach((inbt) -> {
            Tardis tardis = new Tardis((CompoundNBT) inbt);
            tardisList.put(tardis.tardisId, tardis);
        });
        int_to_tardis_id_list.forEach((inbt -> {
            CompoundNBT nbt = ((CompoundNBT) inbt);
            integerMapToUUID.put(nbt.getInt("number"), new TardisId(nbt.getUUID("tardis_ID")));
        }));
        latestTardisNumber = tardisList.size() - 1;
        tag.getBoolean("canFall");
        tardisWorldSavedData.setDirty(false);
    }

    public CompoundNBT save(CompoundNBT tag) {
        System.out.println("Tardis Manager Saving");
        System.out.println(tardisList);
        ListNBT tardis_nbt_list = new ListNBT(); // Create ListNBT
        ListNBT int_to_tardis_id_list = new ListNBT(); // Create ListNBT
        tardisList.forEach((id, tardis) -> tardis_nbt_list.add(tardis.save()));
        integerMapToUUID.forEach((number, id) -> {
            CompoundNBT nbt = new CompoundNBT();

            nbt.putInt("number", number);
            nbt.putUUID("tardis_ID", id.id());

            int_to_tardis_id_list.add(nbt);
        });
        tag.put("tardis_list", tardis_nbt_list);
        tag.put("integer_tardis_list_to_get_UUID", int_to_tardis_id_list);
        tardisWorldSavedData.setDirty(false);
        tag.putBoolean("canFall", canFall);
        return tag;
    }

    public TardisWorldSavedData getTardisWorldSavedData() {
        return tardisWorldSavedData;
    }
}